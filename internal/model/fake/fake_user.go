// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/timotto/ardumower-relay/internal/model"
)

type FakeUser struct {
	IdStub        func() string
	idMutex       sync.RWMutex
	idArgsForCall []struct {
	}
	idReturns struct {
		result1 string
	}
	idReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUser) Id() string {
	fake.idMutex.Lock()
	ret, specificReturn := fake.idReturnsOnCall[len(fake.idArgsForCall)]
	fake.idArgsForCall = append(fake.idArgsForCall, struct {
	}{})
	stub := fake.IdStub
	fakeReturns := fake.idReturns
	fake.recordInvocation("Id", []interface{}{})
	fake.idMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUser) IdCallCount() int {
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	return len(fake.idArgsForCall)
}

func (fake *FakeUser) IdCalls(stub func() string) {
	fake.idMutex.Lock()
	defer fake.idMutex.Unlock()
	fake.IdStub = stub
}

func (fake *FakeUser) IdReturns(result1 string) {
	fake.idMutex.Lock()
	defer fake.idMutex.Unlock()
	fake.IdStub = nil
	fake.idReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUser) IdReturnsOnCall(i int, result1 string) {
	fake.idMutex.Lock()
	defer fake.idMutex.Unlock()
	fake.IdStub = nil
	if fake.idReturnsOnCall == nil {
		fake.idReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.idReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.User = new(FakeUser)
