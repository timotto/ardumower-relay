// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/timotto/ardumower-relay/internal/model"
)

type FakeTunnelListener struct {
	RemoveTunnelStub        func(model.User, model.Tunnel)
	removeTunnelMutex       sync.RWMutex
	removeTunnelArgsForCall []struct {
		arg1 model.User
		arg2 model.Tunnel
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTunnelListener) RemoveTunnel(arg1 model.User, arg2 model.Tunnel) {
	fake.removeTunnelMutex.Lock()
	fake.removeTunnelArgsForCall = append(fake.removeTunnelArgsForCall, struct {
		arg1 model.User
		arg2 model.Tunnel
	}{arg1, arg2})
	stub := fake.RemoveTunnelStub
	fake.recordInvocation("RemoveTunnel", []interface{}{arg1, arg2})
	fake.removeTunnelMutex.Unlock()
	if stub != nil {
		fake.RemoveTunnelStub(arg1, arg2)
	}
}

func (fake *FakeTunnelListener) RemoveTunnelCallCount() int {
	fake.removeTunnelMutex.RLock()
	defer fake.removeTunnelMutex.RUnlock()
	return len(fake.removeTunnelArgsForCall)
}

func (fake *FakeTunnelListener) RemoveTunnelCalls(stub func(model.User, model.Tunnel)) {
	fake.removeTunnelMutex.Lock()
	defer fake.removeTunnelMutex.Unlock()
	fake.RemoveTunnelStub = stub
}

func (fake *FakeTunnelListener) RemoveTunnelArgsForCall(i int) (model.User, model.Tunnel) {
	fake.removeTunnelMutex.RLock()
	defer fake.removeTunnelMutex.RUnlock()
	argsForCall := fake.removeTunnelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTunnelListener) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeTunnelMutex.RLock()
	defer fake.removeTunnelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTunnelListener) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.TunnelListener = new(FakeTunnelListener)
