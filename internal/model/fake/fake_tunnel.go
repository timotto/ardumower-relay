// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/timotto/ardumower-relay/internal/model"
)

type FakeTunnel struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	SetListenerStub        func(model.TunnelListener)
	setListenerMutex       sync.RWMutex
	setListenerArgsForCall []struct {
		arg1 model.TunnelListener
	}
	StatsStub        func() model.TunnelStats
	statsMutex       sync.RWMutex
	statsArgsForCall []struct {
	}
	statsReturns struct {
		result1 model.TunnelStats
	}
	statsReturnsOnCall map[int]struct {
		result1 model.TunnelStats
	}
	TransferStub        func(context.Context, string) (string, error)
	transferMutex       sync.RWMutex
	transferArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	transferReturns struct {
		result1 string
		result2 error
	}
	transferReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTunnel) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTunnel) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeTunnel) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeTunnel) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTunnel) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTunnel) SetListener(arg1 model.TunnelListener) {
	fake.setListenerMutex.Lock()
	fake.setListenerArgsForCall = append(fake.setListenerArgsForCall, struct {
		arg1 model.TunnelListener
	}{arg1})
	stub := fake.SetListenerStub
	fake.recordInvocation("SetListener", []interface{}{arg1})
	fake.setListenerMutex.Unlock()
	if stub != nil {
		fake.SetListenerStub(arg1)
	}
}

func (fake *FakeTunnel) SetListenerCallCount() int {
	fake.setListenerMutex.RLock()
	defer fake.setListenerMutex.RUnlock()
	return len(fake.setListenerArgsForCall)
}

func (fake *FakeTunnel) SetListenerCalls(stub func(model.TunnelListener)) {
	fake.setListenerMutex.Lock()
	defer fake.setListenerMutex.Unlock()
	fake.SetListenerStub = stub
}

func (fake *FakeTunnel) SetListenerArgsForCall(i int) model.TunnelListener {
	fake.setListenerMutex.RLock()
	defer fake.setListenerMutex.RUnlock()
	argsForCall := fake.setListenerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTunnel) Stats() model.TunnelStats {
	fake.statsMutex.Lock()
	ret, specificReturn := fake.statsReturnsOnCall[len(fake.statsArgsForCall)]
	fake.statsArgsForCall = append(fake.statsArgsForCall, struct {
	}{})
	stub := fake.StatsStub
	fakeReturns := fake.statsReturns
	fake.recordInvocation("Stats", []interface{}{})
	fake.statsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTunnel) StatsCallCount() int {
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return len(fake.statsArgsForCall)
}

func (fake *FakeTunnel) StatsCalls(stub func() model.TunnelStats) {
	fake.statsMutex.Lock()
	defer fake.statsMutex.Unlock()
	fake.StatsStub = stub
}

func (fake *FakeTunnel) StatsReturns(result1 model.TunnelStats) {
	fake.statsMutex.Lock()
	defer fake.statsMutex.Unlock()
	fake.StatsStub = nil
	fake.statsReturns = struct {
		result1 model.TunnelStats
	}{result1}
}

func (fake *FakeTunnel) StatsReturnsOnCall(i int, result1 model.TunnelStats) {
	fake.statsMutex.Lock()
	defer fake.statsMutex.Unlock()
	fake.StatsStub = nil
	if fake.statsReturnsOnCall == nil {
		fake.statsReturnsOnCall = make(map[int]struct {
			result1 model.TunnelStats
		})
	}
	fake.statsReturnsOnCall[i] = struct {
		result1 model.TunnelStats
	}{result1}
}

func (fake *FakeTunnel) Transfer(arg1 context.Context, arg2 string) (string, error) {
	fake.transferMutex.Lock()
	ret, specificReturn := fake.transferReturnsOnCall[len(fake.transferArgsForCall)]
	fake.transferArgsForCall = append(fake.transferArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TransferStub
	fakeReturns := fake.transferReturns
	fake.recordInvocation("Transfer", []interface{}{arg1, arg2})
	fake.transferMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTunnel) TransferCallCount() int {
	fake.transferMutex.RLock()
	defer fake.transferMutex.RUnlock()
	return len(fake.transferArgsForCall)
}

func (fake *FakeTunnel) TransferCalls(stub func(context.Context, string) (string, error)) {
	fake.transferMutex.Lock()
	defer fake.transferMutex.Unlock()
	fake.TransferStub = stub
}

func (fake *FakeTunnel) TransferArgsForCall(i int) (context.Context, string) {
	fake.transferMutex.RLock()
	defer fake.transferMutex.RUnlock()
	argsForCall := fake.transferArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTunnel) TransferReturns(result1 string, result2 error) {
	fake.transferMutex.Lock()
	defer fake.transferMutex.Unlock()
	fake.TransferStub = nil
	fake.transferReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTunnel) TransferReturnsOnCall(i int, result1 string, result2 error) {
	fake.transferMutex.Lock()
	defer fake.transferMutex.Unlock()
	fake.TransferStub = nil
	if fake.transferReturnsOnCall == nil {
		fake.transferReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.transferReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTunnel) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.setListenerMutex.RLock()
	defer fake.setListenerMutex.RUnlock()
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	fake.transferMutex.RLock()
	defer fake.transferMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTunnel) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ model.Tunnel = new(FakeTunnel)
