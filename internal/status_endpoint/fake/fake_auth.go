// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"net/http"
	"sync"

	"github.com/timotto/ardumower-relay/internal/model"
	"github.com/timotto/ardumower-relay/internal/status_endpoint"
)

type FakeAuth struct {
	LookupUserStub        func(*http.Request) (model.User, error)
	lookupUserMutex       sync.RWMutex
	lookupUserArgsForCall []struct {
		arg1 *http.Request
	}
	lookupUserReturns struct {
		result1 model.User
		result2 error
	}
	lookupUserReturnsOnCall map[int]struct {
		result1 model.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuth) LookupUser(arg1 *http.Request) (model.User, error) {
	fake.lookupUserMutex.Lock()
	ret, specificReturn := fake.lookupUserReturnsOnCall[len(fake.lookupUserArgsForCall)]
	fake.lookupUserArgsForCall = append(fake.lookupUserArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	stub := fake.LookupUserStub
	fakeReturns := fake.lookupUserReturns
	fake.recordInvocation("LookupUser", []interface{}{arg1})
	fake.lookupUserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuth) LookupUserCallCount() int {
	fake.lookupUserMutex.RLock()
	defer fake.lookupUserMutex.RUnlock()
	return len(fake.lookupUserArgsForCall)
}

func (fake *FakeAuth) LookupUserCalls(stub func(*http.Request) (model.User, error)) {
	fake.lookupUserMutex.Lock()
	defer fake.lookupUserMutex.Unlock()
	fake.LookupUserStub = stub
}

func (fake *FakeAuth) LookupUserArgsForCall(i int) *http.Request {
	fake.lookupUserMutex.RLock()
	defer fake.lookupUserMutex.RUnlock()
	argsForCall := fake.lookupUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuth) LookupUserReturns(result1 model.User, result2 error) {
	fake.lookupUserMutex.Lock()
	defer fake.lookupUserMutex.Unlock()
	fake.LookupUserStub = nil
	fake.lookupUserReturns = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) LookupUserReturnsOnCall(i int, result1 model.User, result2 error) {
	fake.lookupUserMutex.Lock()
	defer fake.lookupUserMutex.Unlock()
	fake.LookupUserStub = nil
	if fake.lookupUserReturnsOnCall == nil {
		fake.lookupUserReturnsOnCall = make(map[int]struct {
			result1 model.User
			result2 error
		})
	}
	fake.lookupUserReturnsOnCall[i] = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lookupUserMutex.RLock()
	defer fake.lookupUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuth) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ status_endpoint.Auth = new(FakeAuth)
